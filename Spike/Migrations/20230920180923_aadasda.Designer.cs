// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Spike;

#nullable disable

namespace Spike.Migrations
{
    [DbContext(typeof(SpikeContext))]
    [Migration("20230920180923_aadasda")]
    partial class aadasda
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorV1DocumentV1", b =>
                {
                    b.Property<Guid>("AuthorsV1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentsV1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("AuthorsV1Id", "DocumentsV1Id");

                    b.HasIndex("DocumentsV1Id");

                    b.ToTable("AuthorV1DocumentV1");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("AuthorV1DocumentV1History");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Spike.Models.AuthorHistoricV1", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("StringId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VersionTag")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("AuthorHistoricV1", (string)null);
                });

            modelBuilder.Entity("Spike.Models.AuthorV1", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("StringId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VersionTag")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AuthorV1", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("AuthorHistoricV1");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Spike.Models.DocumenV1AuthorV1HJoin", b =>
                {
                    b.Property<Guid>("JoinId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorHistoricV1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorV1ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocmentV1ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentHistoricV1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JoinID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Type1ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Type2ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JoinId");

                    b.HasIndex("AuthorHistoricV1Id");

                    b.HasIndex("DocumentHistoricV1Id");

                    b.HasIndex("Type1ID");

                    b.HasIndex("Type2ID");

                    b.ToTable((string)null);

                    b.ToView("DocumentHistoricV1AuthorHistoricV1History", (string)null);
                });

            modelBuilder.Entity("Spike.Models.DocumentHistoricV1", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VersionTag")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("DocumentHistoricV1", (string)null);
                });

            modelBuilder.Entity("Spike.Models.DocumentV1", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VersionTag")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("DocumentV1", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("DocumentHistoricV1");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            Id = new Guid("05c54966-eae1-4840-b8c5-63b03616e7d7"),
                            Description = "TEST DESCRIPTION",
                            IsDeleted = false,
                            Title = "DOCUMENT 1",
                            VersionTag = new Guid("9ee61862-ad85-4f8b-9e45-a2d8caa7b176")
                        },
                        new
                        {
                            Id = new Guid("a7d9768a-2e65-4273-9d50-d0072efc89ca"),
                            Description = "TEST DESCRIPTION",
                            IsDeleted = false,
                            Title = "DOCUMENT 2",
                            VersionTag = new Guid("5e2e6daa-4cb1-4d1d-85ed-32997bd3d378")
                        },
                        new
                        {
                            Id = new Guid("5197aca2-ad81-49a7-b4b6-a93a8695dd63"),
                            Description = "TEST DESCRIPTION",
                            IsDeleted = false,
                            Title = "DOCUMENT 3",
                            VersionTag = new Guid("aea74fa2-e073-4ef9-bee1-c9eb9b9bf969")
                        },
                        new
                        {
                            Id = new Guid("2f239bf9-b8d3-49a4-8eb0-8a973364b080"),
                            Description = "TEST DESCRIPTION",
                            IsDeleted = false,
                            Title = "DOCUMENT 4",
                            VersionTag = new Guid("234a0bd3-b8fc-4b14-a343-84ca5ca39c5e")
                        },
                        new
                        {
                            Id = new Guid("424d1e00-7538-4075-b240-9f28b482dbde"),
                            Description = "TEST DESCRIPTION",
                            IsDeleted = false,
                            Title = "DOCUMENT 5",
                            VersionTag = new Guid("f592402a-ddb4-4d4a-8533-a1b72a22ddbd")
                        },
                        new
                        {
                            Id = new Guid("6ce1b3d3-fdea-4f44-83c6-d461d4ff2ea9"),
                            Description = "TEST DESCRIPTION",
                            IsDeleted = false,
                            Title = "DOCUMENT 6",
                            VersionTag = new Guid("c8d2d867-eb73-4164-b400-5ebb5105feb7")
                        },
                        new
                        {
                            Id = new Guid("5e9e5905-aa15-4817-9fe3-e762a6510214"),
                            Description = "TEST DESCRIPTION",
                            IsDeleted = false,
                            Title = "DOCUMENT 7",
                            VersionTag = new Guid("c31498b0-191b-46d9-8be4-7eddd07e26ae")
                        },
                        new
                        {
                            Id = new Guid("f99d5fee-f8a0-4e8f-84b1-c3abd412bf5b"),
                            Description = "TEST DESCRIPTION",
                            IsDeleted = false,
                            Title = "DOCUMENT 8",
                            VersionTag = new Guid("06292dcf-6538-4210-9105-ee84d9c7155a")
                        });
                });

            modelBuilder.Entity("AuthorV1DocumentV1", b =>
                {
                    b.HasOne("Spike.Models.AuthorV1", null)
                        .WithMany()
                        .HasForeignKey("AuthorsV1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spike.Models.DocumentV1", null)
                        .WithMany()
                        .HasForeignKey("DocumentsV1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spike.Models.DocumenV1AuthorV1HJoin", b =>
                {
                    b.HasOne("Spike.Models.AuthorHistoricV1", "AuthorHistoricV1")
                        .WithMany()
                        .HasForeignKey("AuthorHistoricV1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spike.Models.DocumentHistoricV1", "DocumentHistoricV1")
                        .WithMany()
                        .HasForeignKey("DocumentHistoricV1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spike.Models.DocumentHistoricV1", "Type1")
                        .WithMany()
                        .HasForeignKey("Type1ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spike.Models.AuthorHistoricV1", "Type2")
                        .WithMany()
                        .HasForeignKey("Type2ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorHistoricV1");

                    b.Navigation("DocumentHistoricV1");

                    b.Navigation("Type1");

                    b.Navigation("Type2");
                });
#pragma warning restore 612, 618
        }
    }
}
